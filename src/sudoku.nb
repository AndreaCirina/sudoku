(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    101054,       2058]
NotebookOptionsPosition[     53632,       1190]
NotebookOutlinePosition[     99950,       2043]
CellTagsIndexPosition[     99907,       2040]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", " ", 
    RowBox[{"NotebookDirectory", "[", "]"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{3.860500368636446*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"9a39f568-919f-4adb-8af6-e8e71e19f064"],

Cell[BoxData[
 RowBox[{"<<", " ", "Sudoku`"}]], "Input",
 CellChangeTimes->{{3.8605003335934033`*^9, 3.860500333749993*^9}, {
  3.860500366188586*^9, 3.8605003750664425`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"f74477cc-5091-4301-8864-0f395ffe0271"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SudokuGame"}]], "Input",
 CellChangeTimes->{{3.8605003805693626`*^9, 3.860500384786579*^9}, {
  3.8607488923670864`*^9, 3.8607488947851815`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"423ffae2-6041-4243-a41d-4be3275970a1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Gioco del sudoku\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"SudokuGame", "[", "]"}], ":=", 
                    RowBox[{"DynamicModule", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`timer", "=", "0"}], ",", 
                    
                    RowBox[{"Sudoku`Private`difficolta", "=", 
                    "\"Tutorial\""}], ",", 
                    RowBox[{"Sudoku`Private`listaDifficolta", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Tutorial\"", ",", "\"Facile\"", ",", 
                    "\"Medio\"", ",", "\"Difficile\""}], "}"}]}], ",", 
                    RowBox[{"Sudoku`Private`popupDifficolta", "=", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`difficolta", 
                    "]"}], ",", "Sudoku`Private`listaDifficolta", ",", 
                    RowBox[{"FieldSize", "\[Rule]", "Small"}]}], "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ",", 
                    RowBox[{"Sudoku`Private`aiutoCheckbox", "=", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "Sudoku`Private`aiuto", "]"}], 
                    "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ",", 
                    RowBox[{"Sudoku`Private`mostraSoluzioneCheckbox", "=", 
                    RowBox[{"Checkbox", "[", 
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`mostraSoluzione", 
                    "]"}], "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`dimensioneManipulate", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`larghezza", "=", "650"}], ",", 
                    RowBox[{"Sudoku`Private`altezza", "=", "100"}]}], 
                    "}"}]}]}], "}"}], ",", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Sudoku`Private`solution", ",", 
                    RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Sudoku`Private`puzzle", ",", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`solution", "=", 
                    RowBox[{"CreateSudoku", "[", 
                    RowBox[{"3", ",", "0.5`"}], "]"}]}], ";", 
                    
                    RowBox[{"Sudoku`Private`createPuzzle", "[", 
                    "Sudoku`Private`solution", "]"}]}]}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Sudoku`Private`cursor", ",", "0"}], "}"}], ",", 
                    RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Aiuto\"", ",", "\"Mostra soluzione\""}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"Sudoku`Private`aiutoCheckbox", ",", 
                    "Sudoku`Private`mostraSoluzioneCheckbox"}], "}"}]}], 
                    "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"Ricomincia\"", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`timer", "=", 
                    RowBox[{"-", "1"}]}], ";", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ";", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ";", 
                    RowBox[{
                    "Sudoku`Private`puzzle", "=", 
                    "Sudoku`Private`puzzleVuoto"}], ";"}], ")"}], "&"}]}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "183", "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"Tempo trascorso:\"", ",", 
                    RowBox[{"Sudoku`Private`avviaTimer", "[", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "183", "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "\"Difficolt\[AGrave]\"", "}"}], ",", 
                    RowBox[{"{", "Sudoku`Private`popupDifficolta", "}"}]}], 
                    "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"Nuovo Sudoku\"", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Print", "[", "Sudoku`Private`difficolta", "]"}], 
                    ";", 
                    RowBox[{"Print", "[", "Sudoku`Private`aiuto", "]"}], ";", 
                    
                    RowBox[{"Print", "[", "Sudoku`Private`mostraSoluzione", 
                    "]"}], ";", 
                    RowBox[{"Sudoku`Private`cursor", "=", "0"}], ";", 
                    RowBox[{"Sudoku`Private`solution", "=", 
                    RowBox[{"Sudoku`Private`randFill", "[", "]"}]}], ";", 
                    RowBox[{"Sudoku`Private`puzzle", "=", 
                    
                    RowBox[{"Sudoku`Private`createPuzzle", "[", 
                    "Sudoku`Private`solution", "]"}]}], ";", 
                    RowBox[{"Sudoku`Private`timer", "=", 
                    RowBox[{"-", "1"}]}], ";", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ";", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ";"}], ")"}], "&"}]}], "]"}]}], "}"}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", 
                    
                    RowBox[{"ContentSize", "\[Rule]", 
                    "Sudoku`Private`dimensioneManipulate"}], ",", 
                    RowBox[{"ControlPlacement", "\[Rule]", "Top"}]}], "]"}]}],
                     "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Sudoku`SudokuGame\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Gioco del sudoku\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Gioco del sudoku", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, Sudoku`SudokuGame, {
      Sudoku`SudokuGame[] :> 
       DynamicModule[{
         Sudoku`Private`timer = 0, Sudoku`Private`difficolta = "Tutorial", 
          Sudoku`Private`listaDifficolta = {
           "Tutorial", "Facile", "Medio", "Difficile"}, 
          Sudoku`Private`popupDifficolta = PopupMenu[
            Dynamic[Sudoku`Private`difficolta], 
            Sudoku`Private`listaDifficolta, FieldSize -> Small], 
          Sudoku`Private`aiuto = False, Sudoku`Private`aiutoCheckbox = 
          Checkbox[
            Dynamic[Sudoku`Private`aiuto]], Sudoku`Private`mostraSoluzione = 
          False, Sudoku`Private`mostraSoluzioneCheckbox = Checkbox[
            Dynamic[Sudoku`Private`mostraSoluzione]], 
          Sudoku`Private`dimensioneManipulate = {
           Sudoku`Private`larghezza = 650, Sudoku`Private`altezza = 100}}, 
         Manipulate[{
          Sudoku`Private`solution, ControlType -> None}, {{
           Sudoku`Private`puzzle, 
            Sudoku`Private`solution = Sudoku`CreateSudoku[3, 0.5]; 
            Sudoku`Private`createPuzzle[Sudoku`Private`solution]}, 
           ControlType -> None}, {{Sudoku`Private`cursor, 0}, ControlType -> 
           None}, 
          Row[{
            Column[{
              Grid[
               
               Transpose[{{"Aiuto", "Mostra soluzione"}, {
                 Sudoku`Private`aiutoCheckbox, 
                  Sudoku`Private`mostraSoluzioneCheckbox}}]], 
              Button[
              "Ricomincia", (Sudoku`Private`timer = -1; 
               Sudoku`Private`aiuto = False; 
               Sudoku`Private`mostraSoluzione = False; 
               Sudoku`Private`puzzle = Sudoku`Private`puzzleVuoto; Null)& ]}], 
            Spacer[183], 
            Column[{"Tempo trascorso:", 
              Sudoku`Private`avviaTimer[]}, Alignment -> Center], 
            Spacer[183], 
            Column[{
              Grid[
               
               Transpose[{{"Difficolt\[AGrave]"}, {
                 Sudoku`Private`popupDifficolta}}]], 
              Button[
              "Nuovo Sudoku", (Print[Sudoku`Private`difficolta]; 
               Print[Sudoku`Private`aiuto]; 
               Print[Sudoku`Private`mostraSoluzione]; 
               Sudoku`Private`cursor = 0; 
               Sudoku`Private`solution = Sudoku`Private`randFill[]; 
               Sudoku`Private`puzzle = 
                Sudoku`Private`createPuzzle[Sudoku`Private`solution]; 
               Sudoku`Private`timer = -1; Sudoku`Private`aiuto = False; 
               Sudoku`Private`mostraSoluzione = False; Null)& ]}]}], 
          SaveDefinitions -> True, ContentSize -> 
          Sudoku`Private`dimensioneManipulate, ControlPlacement -> Top]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Sudoku`SudokuGame"|>, False]]], "Output",
 CellChangeTimes->{{3.8607489040490932`*^9, 3.8607489107812395`*^9}, 
   3.8607495906691008`*^9, {3.860749958607411*^9, 3.860749976144865*^9}, 
   3.8607500845043573`*^9, 3.8607503637521105`*^9, 3.8607520768512306`*^9, 
   3.8607526619883895`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"8f14d32d-2b02-4e62-b4ef-6e42aaac4b8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SudokuGame", "[", "]"}]], "Input",
 CellChangeTimes->{{3.860748933470663*^9, 3.8607489363631625`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"29dbb0f5-64df-4cd9-b9db-2330f1a6a675"],

Cell[BoxData[
 DynamicModuleBox[{Sudoku`Private`timer$$ = 53, Sudoku`Private`difficolta$$ = 
  "Tutorial", Sudoku`Private`listaDifficolta$$ = {
  "Tutorial", "Facile", "Medio", "Difficile"}, 
  Sudoku`Private`popupDifficolta$$ = PopupMenu[
   Dynamic[Sudoku`Private`difficolta$$], Sudoku`Private`listaDifficolta$$, 
   FieldSize -> Small], Sudoku`Private`aiuto$$ = False, 
  Sudoku`Private`aiutoCheckbox$$ = Checkbox[
   Dynamic[Sudoku`Private`aiuto$$]], Sudoku`Private`mostraSoluzione$$ = False,
   Sudoku`Private`mostraSoluzioneCheckbox$$ = Checkbox[
   Dynamic[Sudoku`Private`mostraSoluzione$$]], 
  Sudoku`Private`dimensioneManipulate$$ = {650, 100}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{Sudoku`Private`cursor$$ = 0, Sudoku`Private`puzzle$$ = 
     Sudoku`Private`createPuzzle[<|
      "fullBoard" -> 
       SparseArray[
        Automatic, {9, 9}, 0, {
         1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {4}, {
           5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {
           9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
           4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
           8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {
           3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
           7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}}}, {1, 4,
           6, 8, 5, 2, 9, 3, 7, 8, 2, 7, 3, 9, 6, 1, 5, 4, 9, 3, 5, 4, 1, 7, 
          6, 2, 8, 3, 5, 8, 7, 4, 1, 2, 6, 9, 7, 9, 4, 6, 2, 3, 8, 1, 5, 6, 1,
           2, 9, 8, 5, 4, 7, 3, 5, 6, 9, 1, 7, 4, 3, 8, 2, 2, 8, 3, 5, 6, 9, 
          7, 4, 1, 4, 7, 1, 2, 3, 8, 5, 9, 6}}], "sudokuPuzzle" -> 
       SparseArray[
        Automatic, {9, 9}, Blank[], {
         1, {{0, 5, 11, 15, 21, 26, 30, 34, 38, 41}, {{7}, {5}, {6}, {8}, {
           9}, {2}, {9}, {7}, {6}, {3}, {4}, {3}, {6}, {4}, {1}, {6}, {3}, {
           8}, {4}, {7}, {5}, {9}, {5}, {4}, {6}, {8}, {2}, {5}, {7}, {9}, {
           3}, {2}, {8}, {9}, {1}, {6}, {2}, {4}, {8}, {4}, {3}}}, {9, 5, 2, 
          3, 7, 2, 4, 1, 6, 7, 3, 5, 7, 4, 9, 1, 8, 6, 7, 2, 4, 5, 2, 6, 3, 1,
           1, 8, 4, 3, 9, 6, 8, 2, 2, 9, 8, 5, 9, 2, 1}}]|>], Typeset`show$$ =
      True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{{
        Hold[Sudoku`Private`puzzle$$], 
        Sudoku`Private`createPuzzle[<|
         "fullBoard" -> 
          SparseArray[
           Automatic, {9, 9}, 0, {
            1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
              8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
              2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
              8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
              2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}}}, {1, 4, 6, 8, 5, 2, 9, 3, 7, 8, 2, 7, 
             3, 9, 6, 1, 5, 4, 9, 3, 5, 4, 1, 7, 6, 2, 8, 3, 5, 8, 7, 4, 1, 2,
              6, 9, 7, 9, 4, 6, 2, 3, 8, 1, 5, 6, 1, 2, 9, 8, 5, 4, 7, 3, 5, 
             6, 9, 1, 7, 4, 3, 8, 2, 2, 8, 3, 5, 6, 9, 7, 4, 1, 4, 7, 1, 2, 3,
              8, 5, 9, 6}}], "sudokuPuzzle" -> 
          SparseArray[
           Automatic, {9, 9}, Blank[], {
            1, {{0, 5, 11, 15, 21, 26, 30, 34, 38, 41}, {{7}, {5}, {6}, {8}, {
              9}, {2}, {9}, {7}, {6}, {3}, {4}, {3}, {6}, {4}, {1}, {6}, {
              3}, {8}, {4}, {7}, {5}, {9}, {5}, {4}, {6}, {8}, {2}, {5}, {
              7}, {9}, {3}, {2}, {8}, {9}, {1}, {6}, {2}, {4}, {8}, {4}, {
              3}}}, {9, 5, 2, 3, 7, 2, 4, 1, 6, 7, 3, 5, 7, 4, 9, 1, 8, 6, 7, 
             2, 4, 5, 2, 6, 3, 1, 1, 8, 4, 3, 9, 6, 8, 2, 2, 9, 8, 5, 9, 2, 
             1}}]|>]}}, {{
        Hold[Sudoku`Private`cursor$$], 0}}, {
       Hold[
        Row[{
          Column[{
            Grid[{{"Aiuto", 
               Checkbox[
                Dynamic[Sudoku`Private`aiuto$$]]}, {"Mostra soluzione", 
               Checkbox[
                Dynamic[Sudoku`Private`mostraSoluzione$$]]}}], 
            Button[
            "Ricomincia", (Sudoku`Private`timer$$ = -1; 
             Sudoku`Private`aiuto$$ = False; 
             Sudoku`Private`mostraSoluzione$$ = False; 
             Sudoku`Private`puzzle$$ = Sudoku`Private`puzzleVuoto; Null)& ]}], 
          Spacer[183], 
          Column[{"Tempo trascorso:", 
            Dynamic[
             Refresh[
             Sudoku`Private`timer$$ = Sudoku`Private`timer$$ + 1; 
              Sudoku`Private`convert[Sudoku`Private`timer$$], 
              TrackedSymbols :> {}, UpdateInterval -> 1]]}, Alignment -> 
           Center], 
          Spacer[183], 
          Column[{
            Grid[{{"Difficolt\[AGrave]", 
               PopupMenu[
                Dynamic[Sudoku`Private`difficolta$$], 
                Sudoku`Private`listaDifficolta$$, FieldSize -> Small]}}], 
            Button[
            "Nuovo Sudoku", (Print[Sudoku`Private`difficolta$$]; 
             Print[Sudoku`Private`aiuto$$]; 
             Print[Sudoku`Private`mostraSoluzione$$]; 
             Sudoku`Private`cursor$$ = 0; 
             Sudoku`Private`solution = Sudoku`Private`randFill[]; 
             Sudoku`Private`puzzle$$ = 
              Sudoku`Private`createPuzzle[Sudoku`Private`solution]; 
             Sudoku`Private`timer$$ = -1; Sudoku`Private`aiuto$$ = False; 
             Sudoku`Private`mostraSoluzione$$ = False; Null)& ]}]}]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
     536.7778217380866, {95.375, 25.}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, 
       "Variables" :> {
        Sudoku`Private`cursor$$ = 0, Sudoku`Private`puzzle$$ = 
         Sudoku`Private`createPuzzle[<|
           "fullBoard" -> 
            SparseArray[
             Automatic, {9, 9}, 0, {
              1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {
                4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
                7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {
                1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
                4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
                7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {
                1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
                4}, {5}, {6}, {7}, {8}, {9}}}, {1, 4, 6, 8, 5, 2, 9, 3, 7, 8, 
               2, 7, 3, 9, 6, 1, 5, 4, 9, 3, 5, 4, 1, 7, 6, 2, 8, 3, 5, 8, 7, 
               4, 1, 2, 6, 9, 7, 9, 4, 6, 2, 3, 8, 1, 5, 6, 1, 2, 9, 8, 5, 4, 
               7, 3, 5, 6, 9, 1, 7, 4, 3, 8, 2, 2, 8, 3, 5, 6, 9, 7, 4, 1, 4, 
               7, 1, 2, 3, 8, 5, 9, 6}}], "sudokuPuzzle" -> 
            SparseArray[
             Automatic, {9, 9}, Blank[], {
              1, {{0, 5, 11, 15, 21, 26, 30, 34, 38, 41}, {{7}, {5}, {6}, {
                8}, {9}, {2}, {9}, {7}, {6}, {3}, {4}, {3}, {6}, {4}, {1}, {
                6}, {3}, {8}, {4}, {7}, {5}, {9}, {5}, {4}, {6}, {8}, {2}, {
                5}, {7}, {9}, {3}, {2}, {8}, {9}, {1}, {6}, {2}, {4}, {8}, {
                4}, {3}}}, {9, 5, 2, 3, 7, 2, 4, 1, 6, 7, 3, 5, 7, 4, 9, 1, 8,
                6, 7, 2, 4, 5, 2, 6, 3, 1, 1, 8, 4, 3, 9, 6, 8, 2, 2, 9, 8, 5,
                9, 2, 1}}]|>]}, "ControllerVariables" :> {}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, 
       "Body" :> {Sudoku`Private`solution, ControlType -> None}, 
       "Specifications" :> {{{Sudoku`Private`puzzle$$, 
           
           Sudoku`Private`createPuzzle[<|
            "fullBoard" -> 
             SparseArray[
              Automatic, {9, 9}, 0, {
               1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {
                 4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
                 7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {
                 1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
                 4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
                 7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {
                 1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
                 4}, {5}, {6}, {7}, {8}, {9}}}, {1, 4, 6, 8, 5, 2, 9, 3, 7, 8,
                 2, 7, 3, 9, 6, 1, 5, 4, 9, 3, 5, 4, 1, 7, 6, 2, 8, 3, 5, 8, 
                7, 4, 1, 2, 6, 9, 7, 9, 4, 6, 2, 3, 8, 1, 5, 6, 1, 2, 9, 8, 5,
                 4, 7, 3, 5, 6, 9, 1, 7, 4, 3, 8, 2, 2, 8, 3, 5, 6, 9, 7, 4, 
                1, 4, 7, 1, 2, 3, 8, 5, 9, 6}}], "sudokuPuzzle" -> 
             SparseArray[
              Automatic, {9, 9}, Blank[], {
               1, {{0, 5, 11, 15, 21, 26, 30, 34, 38, 41}, {{7}, {5}, {6}, {
                 8}, {9}, {2}, {9}, {7}, {6}, {3}, {4}, {3}, {6}, {4}, {1}, {
                 6}, {3}, {8}, {4}, {7}, {5}, {9}, {5}, {4}, {6}, {8}, {2}, {
                 5}, {7}, {9}, {3}, {2}, {8}, {9}, {1}, {6}, {2}, {4}, {8}, {
                 4}, {3}}}, {9, 5, 2, 3, 7, 2, 4, 1, 6, 7, 3, 5, 7, 4, 9, 1, 
                8, 6, 7, 2, 4, 5, 2, 6, 3, 1, 1, 8, 4, 3, 9, 6, 8, 2, 2, 9, 8,
                 5, 9, 2, 1}}]|>]}, ControlType -> None}, {{
          Sudoku`Private`cursor$$, 0}, ControlType -> None}, 
         Row[{
           Column[{
             Grid[{{"Aiuto", 
                Checkbox[
                 Dynamic[Sudoku`Private`aiuto$$]]}, {"Mostra soluzione", 
                Checkbox[
                 Dynamic[Sudoku`Private`mostraSoluzione$$]]}}], 
             Button[
             "Ricomincia", (Sudoku`Private`timer$$ = -1; 
              Sudoku`Private`aiuto$$ = False; 
              Sudoku`Private`mostraSoluzione$$ = False; 
              Sudoku`Private`puzzle$$ = Sudoku`Private`puzzleVuoto; 
              Null)& ]}], 
           Spacer[183], 
           Column[{"Tempo trascorso:", 
             Dynamic[
              Refresh[
              Sudoku`Private`timer$$ = Sudoku`Private`timer$$ + 1; 
               Sudoku`Private`convert[Sudoku`Private`timer$$], 
               TrackedSymbols :> {}, UpdateInterval -> 1]]}, Alignment -> 
            Center], 
           Spacer[183], 
           Column[{
             Grid[{{"Difficolt\[AGrave]", 
                PopupMenu[
                 Dynamic[Sudoku`Private`difficolta$$], 
                 Sudoku`Private`listaDifficolta$$, FieldSize -> Small]}}], 
             Button[
             "Nuovo Sudoku", (Print[Sudoku`Private`difficolta$$]; 
              Print[Sudoku`Private`aiuto$$]; 
              Print[Sudoku`Private`mostraSoluzione$$]; 
              Sudoku`Private`cursor$$ = 0; 
              Sudoku`Private`solution = Sudoku`Private`randFill[]; 
              Sudoku`Private`puzzle$$ = 
               Sudoku`Private`createPuzzle[Sudoku`Private`solution]; 
              Sudoku`Private`timer$$ = -1; Sudoku`Private`aiuto$$ = False; 
              Sudoku`Private`mostraSoluzione$$ = False; Null)& ]}]}]}, 
       "Options" :> {ContentSize -> {650, 100}, ControlPlacement -> Top}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{669., {120.13403328722343`, 125.86596671277657`}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({
       Sudoku`Private`solution = <|
         "fullBoard" -> 
          SparseArray[
           Automatic, {9, 9}, 0, {
            1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
              8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
              2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
              8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
              2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {
              5}, {6}, {7}, {8}, {9}}}, {1, 4, 6, 8, 5, 2, 9, 3, 7, 8, 2, 7, 
             3, 9, 6, 1, 5, 4, 9, 3, 5, 4, 1, 7, 6, 2, 8, 3, 5, 8, 7, 4, 1, 2,
              6, 9, 7, 9, 4, 6, 2, 3, 8, 1, 5, 6, 1, 2, 9, 8, 5, 4, 7, 3, 5, 
             6, 9, 1, 7, 4, 3, 8, 2, 2, 8, 3, 5, 6, 9, 7, 4, 1, 4, 7, 1, 2, 3,
              8, 5, 9, 6}}], "sudokuPuzzle" -> 
          SparseArray[
           Automatic, {9, 9}, Blank[], {
            1, {{0, 5, 11, 15, 21, 26, 30, 34, 38, 41}, {{7}, {5}, {6}, {8}, {
              9}, {2}, {9}, {7}, {6}, {3}, {4}, {3}, {6}, {4}, {1}, {6}, {
              3}, {8}, {4}, {7}, {5}, {9}, {5}, {4}, {6}, {8}, {2}, {5}, {
              7}, {9}, {3}, {2}, {8}, {9}, {1}, {6}, {2}, {4}, {8}, {4}, {
              3}}}, {9, 5, 2, 3, 7, 2, 4, 1, 6, 7, 3, 5, 7, 4, 9, 1, 8, 6, 7, 
             2, 4, 5, 2, 6, 3, 1, 1, 8, 4, 3, 9, 6, 8, 2, 2, 9, 8, 5, 9, 2, 
             1}}]|>, Sudoku`Private`convert[
          Pattern[Sudoku`Private`x, 
           Blank[]]] := UnitConvert[
          Quantity[Sudoku`Private`x, "Seconds"], 
          MixedUnit[{"Hours", "Minutes", "Seconds"}]]}; 
      Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.8607489376598454`*^9, {3.8607495929966974`*^9, 3.860749594878587*^9}, {
   3.860749958689459*^9, 3.8607499791750755`*^9}, {3.8607500845715847`*^9, 
   3.8607500992900314`*^9}, {3.860750363932564*^9, 3.860750366840311*^9}, 
   3.8607520815768127`*^9, 3.8607526681589994`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"b9e525a1-3db1-47f8-92c2-77fde4647b57"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{3.860750195859049*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"96a6f163-5bb3-45f4-9546-0f38cdf70365"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"suds", " ", "=", " ", 
    RowBox[{"CreateSudoku", "[", 
     RowBox[{"3", ",", "0.5"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sudokuPuzzle", " ", "=", " ", 
    RowBox[{"suds", "[", 
     RowBox[{"[", "\"\<sudokuPuzzle\>\"", "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"?", "ShowSudoku"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowSudoku2", "[", 
    RowBox[{"board_", ",", "dim_", ",", "color_", ",", 
     RowBox[{"cursor_", ":", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\n", 
     RowBox[{"Grid", "[", 
      RowBox[{"board", ",", 
       RowBox[{"ItemSize", "->", "Full"}], ",", 
       RowBox[{"Frame", "->", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "[", 
           RowBox[{"cursor", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", "All", ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "All", ",", 
            RowBox[{"cursor", "->", 
             RowBox[{"{", "Blue", "}"}]}]}], "}"}]}], "]"}]}], ",", 
       RowBox[{"BaseStyle", "->", "dim"}], ",", 
       RowBox[{"Spacings", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Offset", "[", "0.9", "]"}], ",", 
          RowBox[{"Offset", "[", "0.6", "]"}]}], "}"}]}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "cursor", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", "cursor", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cursor", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"loc", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"1", "+", 
    RowBox[{"Floor", "[", 
     RowBox[{"9", " ", "x"}], "]"}], "+", 
    RowBox[{"9", " ", 
     RowBox[{"Floor", "[", 
      RowBox[{"9", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "y"}], ")"}]}], "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"loc2", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_"}], "}"}], "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{"9", 
       RowBox[{"(", 
        RowBox[{"1", "-", "y"}], ")"}]}], "]"}], "+", "1"}], ",", " ", 
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{"9", "x"}], "]"}], "+", "1"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"EventHandler", "[", 
  RowBox[{
   RowBox[{"Dynamic", "[", 
    RowBox[{"ShowSudoku2", "[", 
     RowBox[{
     "sudokuPuzzle", " ", ",", " ", "22", ",", "Black", ",", " ", "cursor"}], 
     "]"}], "]"}], ",", 
   RowBox[{"\"\<MouseClicked\>\"", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{"cursor", "=", 
      RowBox[{"loc2", "[", 
       RowBox[{"MousePosition", "[", "\"\<EventHandlerScaled\>\"", "]"}], 
       "]"}]}], ")"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.860685686154086*^9, 3.8606856868135986`*^9}, {
   3.8606857212536883`*^9, 3.860685771410916*^9}, {3.8606858113154736`*^9, 
   3.860685850721838*^9}, {3.8606859039077535`*^9, 3.860685932431148*^9}, {
   3.860685966971998*^9, 3.8606859723223057`*^9}, {3.8606860343089375`*^9, 
   3.8606860452676816`*^9}, {3.8606860850883827`*^9, 3.860686089561981*^9}, {
   3.860686275119486*^9, 3.8606863129023457`*^9}, {3.8606863559249735`*^9, 
   3.8606863586739316`*^9}, {3.860686423232772*^9, 3.860686425757906*^9}, {
   3.860687091554537*^9, 3.860687098037883*^9}, {3.860687156169968*^9, 
   3.860687175595395*^9}, {3.860687240466445*^9, 3.8606873331701894`*^9}, {
   3.8606873952394333`*^9, 3.8606874026180663`*^9}, {3.86068758132362*^9, 
   3.8606876040851536`*^9}, {3.8606876834205184`*^9, 3.860687695162047*^9}, {
   3.86068778103013*^9, 3.8606878033407307`*^9}, {3.860687845607489*^9, 
   3.8606878552475157`*^9}, {3.860687887439886*^9, 3.860687888931407*^9}, {
   3.860687944697341*^9, 3.860687950050167*^9}, {3.8606881109713297`*^9, 
   3.860688288122757*^9}, {3.860749589616255*^9, 3.8607495916321297`*^9}, 
   3.8607515585667505`*^9, 3.860751732264164*^9, {3.860751803651222*^9, 
   3.8607518050685744`*^9}, {3.8607519942695394`*^9, 
   3.8607520208973055`*^9}, {3.8607520600787144`*^9, 3.86075206540017*^9}, {
   3.8607520966122293`*^9, 3.8607521647199087`*^9}, {3.8607522009494224`*^9, 
   3.860752281948772*^9}, 3.8607523507939434`*^9, {3.86075251572703*^9, 
   3.860752539149619*^9}, 3.860752654876794*^9, 3.8607527414463797`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"c9ff71d2-e8fa-48ee-a071-d299d75d1a8f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"mostra\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"ShowSudoku", "[", 
                    
                    RowBox[{
                    "Sudoku`Private`board_", ",", "Sudoku`Private`dim_", ",", 
                    RowBox[{"Sudoku`Private`cursor_", ":", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{"Sudoku`Private`board", ",", 
                    RowBox[{"ItemSize", "\[Rule]", "Full"}], ",", 
                    RowBox[{"Frame", "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`cursor", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", "All", ",", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "All", ",", 
                    RowBox[{"Sudoku`Private`cursor", "\[Rule]", 
                    RowBox[{"{", "Blue", "}"}]}]}], "}"}]}], "]"}]}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", "Sudoku`Private`dim"}], 
                    ",", 
                    RowBox[{"Spacings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Offset", "[", "0.9`", "]"}], ",", 
                    RowBox[{"Offset", "[", "0.6`", "]"}]}], "}"}]}]}], 
                    "]"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Sudoku`ShowSudoku\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"mostra\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "mostra", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, Sudoku`ShowSudoku, {Sudoku`ShowSudoku[
         Pattern[Sudoku`Private`board, 
          Blank[]], 
         Pattern[Sudoku`Private`dim, 
          Blank[]], 
         Optional[
          Pattern[Sudoku`Private`cursor, 
           Blank[]], {0, 0}]] :> Module[{}, 
         Grid[
         Sudoku`Private`board, ItemSize -> Full, Frame -> 
          If[Sudoku`Private`cursor == {0, 0}, All, {
            All, All, Sudoku`Private`cursor -> {Blue}}], BaseStyle -> 
          Sudoku`Private`dim, Spacings -> {
            Offset[0.9], 
            Offset[0.6]}]]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Sudoku`ShowSudoku"|>, 
   False]]], "Output",
 CellChangeTimes->{{3.8607520831795607`*^9, 3.8607521672487173`*^9}, 
   3.860752214543559*^9, {3.860752262468979*^9, 3.8607522860309315`*^9}, 
   3.8607523620093517`*^9, {3.86075251895937*^9, 3.86075253042258*^9}, 
   3.860752566188899*^9, 3.860752670090925*^9, 3.8607527439094863`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"8095c03c-1200-40d8-a34d-6e250c1d9010"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`cursor, StandardForm],
  ImageSizeCache->{41.04492078796029, {3., 9.}}]], "Output",
 CellChangeTimes->{{3.8607520831795607`*^9, 3.8607521672487173`*^9}, 
   3.860752214543559*^9, {3.860752262468979*^9, 3.8607522860309315`*^9}, 
   3.8607523620093517`*^9, {3.86075251895937*^9, 3.86075253042258*^9}, 
   3.860752566188899*^9, 3.860752670090925*^9, 3.8607527439251146`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"12331f15-9a7e-4e6a-9fd6-2aa960ae4531"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.8607520831795607`*^9, 3.8607521672487173`*^9}, 
   3.860752214543559*^9, {3.860752262468979*^9, 3.8607522860309315`*^9}, 
   3.8607523620093517`*^9, {3.86075251895937*^9, 3.86075253042258*^9}, 
   3.860752566188899*^9, 3.860752670090925*^9, 3.8607527439251146`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"1c438a78-956f-4f1c-82d2-798757281f9a"],

Cell[BoxData[
 TagBox[
  DynamicBox[ToBoxes[
    $CellContext`ShowSudoku2[$CellContext`sudokuPuzzle, 22, 
     Black, $CellContext`cursor], StandardForm],
   ImageSizeCache->{308., {149.54990217555314`, 159.25009782444687`}}],
  EventHandlerTag[{"MouseClicked" :> ($CellContext`cursor = $CellContext`loc2[
       MousePosition["EventHandlerScaled"]]), Method -> "Preemptive", 
    PassEventsDown -> Automatic, PassEventsUp -> True}]]], "Output",
 CellChangeTimes->{{3.8607520831795607`*^9, 3.8607521672487173`*^9}, 
   3.860752214543559*^9, {3.860752262468979*^9, 3.8607522860309315`*^9}, 
   3.8607523620093517`*^9, {3.86075251895937*^9, 3.86075253042258*^9}, 
   3.860752566188899*^9, 3.860752670090925*^9, 3.860752743940735*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"de4cb296-693c-4a4c-b981-8f6fcd778085"]
}, Open  ]]
},
WindowSize->{574.8, 573.6},
WindowMargins->{{-4.8, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[(
            CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{
            CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aa3ba23a-012a-44de-86b9-47e132f7fc63"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 274, 6, 28, "Input",ExpressionUUID->"9a39f568-919f-4adb-8af6-e8e71e19f064"],
Cell[835, 28, 254, 4, 28, "Input",ExpressionUUID->"f74477cc-5091-4301-8864-0f395ffe0271"],
Cell[CellGroupData[{
Cell[1114, 36, 253, 4, 28, "Input",ExpressionUUID->"423ffae2-6041-4243-a41d-4be3275970a1"],
Cell[1370, 42, 19334, 436, 93, "Output",ExpressionUUID->"8f14d32d-2b02-4e62-b4ef-6e42aaac4b8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20741, 483, 205, 3, 28, "Input",ExpressionUUID->"29dbb0f5-64df-4cd9-b9db-2330f1a6a675"],
Cell[20949, 488, 14314, 258, 265, "Output",ExpressionUUID->"b9e525a1-3db1-47f8-92c2-77fde4647b57"]
}, Open  ]],
Cell[35278, 749, 148, 2, 28, "Input",ExpressionUUID->"96a6f163-5bb3-45f4-9546-0f38cdf70365"],
Cell[CellGroupData[{
Cell[35451, 755, 4777, 113, 409, "Input",ExpressionUUID->"c9ff71d2-e8fa-48ee-a071-d299d75d1a8f"],
Cell[40231, 870, 11629, 284, 93, "Output",ExpressionUUID->"8095c03c-1200-40d8-a34d-6e250c1d9010"],
Cell[51863, 1156, 497, 7, 32, "Output",ExpressionUUID->"12331f15-9a7e-4e6a-9fd6-2aa960ae4531"],
Cell[52363, 1165, 440, 7, 32, "Output",ExpressionUUID->"1c438a78-956f-4f1c-82d2-798757281f9a"],
Cell[52806, 1174, 810, 13, 350, "Output",ExpressionUUID->"de4cb296-693c-4a4c-b981-8f6fcd778085"]
}, Open  ]]
}
]
*)

