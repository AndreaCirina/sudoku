(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     98873,       1995]
NotebookOptionsPosition[     52027,       1133]
NotebookOutlinePosition[     98383,       1988]
CellTagsIndexPosition[     98340,       1985]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", " ", 
    RowBox[{"NotebookDirectory", "[", "]"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{3.860500368636446*^9},
 CellLabel->
  "In[209]:=",ExpressionUUID->"9a39f568-919f-4adb-8af6-e8e71e19f064"],

Cell[BoxData[
 RowBox[{"<<", " ", "Sudoku`"}]], "Input",
 CellChangeTimes->{{3.8605003335934033`*^9, 3.860500333749993*^9}, {
  3.860500366188586*^9, 3.8605003750664425`*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"f74477cc-5091-4301-8864-0f395ffe0271"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SudokuGame"}]], "Input",
 CellChangeTimes->{{3.8605003805693626`*^9, 3.860500384786579*^9}, {
  3.8607488923670864`*^9, 3.8607488947851815`*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"423ffae2-6041-4243-a41d-4be3275970a1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Gioco del sudoku\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"SudokuGame", "[", "]"}], ":=", 
                    RowBox[{"DynamicModule", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`difficolta", "=", "\"Facile\""}], 
                    ",", 
                    
                    RowBox[{"Sudoku`Private`difficoltaInCorso", "=", 
                    "\"Medio\""}], ",", 
                    RowBox[{"Sudoku`Private`popupDifficolta", "=", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`difficolta", 
                    "]"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Tutorial\"", ",", "\"Facile\"", ",", 
                    "\"Medio\"", ",", "\"Difficile\""}], "}"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "Small"}]}], "]"}]}], ",", 
                    
                    RowBox[{"Sudoku`Private`difficoltaCarica", "=", 
                    "\"Facile\""}], ",", 
                    RowBox[{"Sudoku`Private`popupDifficoltaCarica", "=", 
                    RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`difficoltaCarica",
                     "]"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Tutorial\"", ",", "\"Facile\"", ",", 
                    "\"Medio\"", ",", "\"Difficile\""}], "}"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "Small"}]}], "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`numSudoku", "=", 
                    RowBox[{"RandomInteger", "[", "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`caricaSudoku", "=", "0"}], ",", 
                    RowBox[{"Sudoku`Private`caricaSudokuInput", "=", 
                    RowBox[{"InputField", "[", 
                    RowBox[{
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`caricaSudoku", 
                    "]"}], ",", 
                    RowBox[{"FieldSize", "\[Rule]", "Small"}]}], "]"}]}], ",",
                     "Sudoku`Private`sudoku", ",", "Sudoku`Private`fullBoard",
                     ",", "Sudoku`Private`puzzle", ",", 
                    RowBox[{"Sudoku`Private`cursor", "=", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], ",", 
                    "Sudoku`Private`inputValue", ",", 
                    RowBox[{"Sudoku`Private`timer", "=", "0"}], ",", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ",", 
                    RowBox[{"Sudoku`Private`aiutoCheckbox", "=", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "Sudoku`Private`aiuto", "]"}], 
                    "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ",", 
                    RowBox[{"Sudoku`Private`mostraSoluzioneCheckbox", "=", 
                    RowBox[{"Checkbox", "[", 
                    
                    RowBox[{"Dynamic", "[", "Sudoku`Private`mostraSoluzione", 
                    "]"}], "]"}]}], ",", 
                    RowBox[{"Sudoku`Private`dimensioneManipulate", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`larghezza", "=", "650"}], ",", 
                    RowBox[{"Sudoku`Private`altezza", "=", "400"}]}], 
                    "}"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`sudoku", "=", 
                    RowBox[{"CreateSudoku", "[", 
                    RowBox[{"3", ",", "Sudoku`Private`difficoltaInCorso"}], 
                    "]"}]}], ";", 
                    RowBox[{"Sudoku`Private`fullBoard", "=", 
                    
                    RowBox[{"Sudoku`Private`sudoku", "\[LeftDoubleBracket]", 
                    "\"fullBoard\"", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Sudoku`Private`puzzle", "=", 
                    
                    RowBox[{"Sudoku`Private`sudoku", "\[LeftDoubleBracket]", 
                    "\"sudokuPuzzle\"", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Manipulate", "[", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"EventHandler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"ShowSudoku", "[", 
                    
                    RowBox[{"Sudoku`Private`puzzle", ",", "22", ",", 
                    "Sudoku`Private`cursor"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"MouseClicked\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{"Sudoku`Private`cursor", "=", 
                    RowBox[{"Sudoku`Private`loc2", "[", 
                    
                    RowBox[{"MousePosition", "[", "\"EventHandlerScaled\"", 
                    "]"}], "]"}]}], ")"}]}], ",", 
                    RowBox[{"\"KeyDown\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`inputValue", "=", 
                    RowBox[{"CurrentValue", "[", "\"EventKey\"", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"Sudoku`Private`cursor", "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], "\[NotEqual]", "0"}], 
                    "&&", 
                    RowBox[{"DigitQ", "[", "Sudoku`Private`inputValue", "]"}],
                     "&&", 
                    RowBox[{"Between", "[", 
                    RowBox[{
                    
                    RowBox[{"ToExpression", "[", "Sudoku`Private`inputValue", 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "9"}], "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sudoku`Private`puzzle", "\[LeftDoubleBracket]", 
                    
                    RowBox[{"Sudoku`Private`cursor", "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}],
                     "\[LeftDoubleBracket]", 
                    RowBox[{
                    "Sudoku`Private`cursor", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], "=",
                     "Sudoku`Private`inputValue"}]}], "]"}]}], ")"}]}]}], 
                    "}"}]}], "]"}], "}"}], "]"}], ",", "\"\\t\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"ShowSudoku", "[", 
                    
                    RowBox[{"Sudoku`Private`fullBoard", ",", "15", ",", 
                    "Sudoku`Private`cursor"}], "]"}], "]"}], ",", "\"\""}], 
                    "]"}]}], "}"}], "}"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Spacer", "[", "170", "]"}], ",", 
                    
                    RowBox[{"Sudoku`Private`titleMainStyle", "[", 
                    "\"Difficolt\[AGrave]:  \"", "]"}], ",", 
                    RowBox[{"Sudoku`Private`titleElemStyle", "[", 
                    
                    RowBox[{"Dynamic", "[", 
                    "Sudoku`Private`difficoltaInCorso", "]"}], "]"}], ",", 
                    RowBox[{"Spacer", "[", "20", "]"}], ",", 
                    
                    RowBox[{"Sudoku`Private`titleMainStyle", "[", 
                    "\"Numero Sudoku:  \"", "]"}], ",", 
                    RowBox[{"Sudoku`Private`titleElemStyle", "[", 
                    RowBox[{"Dynamic", "[", "Sudoku`Private`numSudoku", "]"}],
                     "]"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Spacer", "[", 
                    RowBox[{"{", 
                    RowBox[{"20", ",", "50"}], "}"}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"Sudoku`Private`mainStyle", "[", "\"Aiuto: \"", 
                    "]"}], ",", 
                    RowBox[{
                    "Sudoku`Private`mainStyle", "[", "\"Mostra soluzione: \"",
                     "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"Sudoku`Private`aiutoCheckbox", ",", 
                    "Sudoku`Private`mostraSoluzioneCheckbox"}], "}"}]}], 
                    "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"Ricomincia\"", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`timer", "=", 
                    RowBox[{"-", "1"}]}], ";", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ";", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ";"}], ")"}], "&"}]}], "]"}]}], "}"}], "]"}], ",", 
                    RowBox[{"Spacer", "[", 
                    RowBox[{"{", 
                    RowBox[{"350", ",", "0"}], "}"}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"Sudoku`Private`mainStyle", "[", "\"Tempo:  \"", 
                    "]"}], ",", 
                    RowBox[{"Sudoku`Private`avviaTimer", "[", "]"}]}], "}"}], 
                    "]"}], "}"}], "]"}]}], "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Control", "[", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Spacer", "[", 
                    RowBox[{"{", 
                    RowBox[{"100", ",", "0"}], "}"}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"Sudoku`Private`elemStyle", "[", 
                    "\"Nuovo Sudoku:\"", "]"}], ",", 
                    RowBox[{"Panel", "[", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"Sudoku`Private`mainStyle", "[", 
                    "\"Difficolt\[AGrave]: \"", "]"}], "}"}], ",", 
                    RowBox[{"{", "Sudoku`Private`popupDifficolta", "}"}]}], 
                    "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"Nuovo Sudoku\"", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`timer", "=", 
                    RowBox[{"-", "1"}]}], ";", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ";", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ";", 
                    RowBox[{"Sudoku`Private`difficoltaInCorso", "=", 
                    "Sudoku`Private`difficolta"}], ";", 
                    RowBox[{"Sudoku`Private`numSudoku", "=", 
                    RowBox[{"Sudoku`Private`generaNuovoSeed", "[", "]"}]}], 
                    ";", 
                    RowBox[{"Sudoku`Private`sudoku", "=", 
                    RowBox[{"CreateSudoku", "[", 
                    RowBox[{"3", ",", "Sudoku`Private`difficoltaInCorso"}], 
                    "]"}]}], ";", 
                    RowBox[{"Sudoku`Private`fullBoard", "=", 
                    
                    RowBox[{"Sudoku`Private`sudoku", "\[LeftDoubleBracket]", 
                    "\"fullBoard\"", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Sudoku`Private`puzzle", "=", 
                    
                    RowBox[{"Sudoku`Private`sudoku", "\[LeftDoubleBracket]", 
                    "\"sudokuPuzzle\"", "\[RightDoubleBracket]"}]}], ";"}], 
                    ")"}], "&"}]}], "]"}]}], "}"}], "]"}], "]"}]}], "}"}], 
                    "]"}], ",", 
                    RowBox[{"Spacer", "[", 
                    RowBox[{"{", 
                    RowBox[{"50", ",", "0"}], "}"}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Spacer", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "5"}], "}"}], "]"}], ",", 
                    
                    RowBox[{"Sudoku`Private`elemStyle", "[", 
                    "\"Carica Sudoku:\"", "]"}], ",", 
                    RowBox[{"Panel", "[", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Grid", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"Sudoku`Private`mainStyle", "[", 
                    "\"Numero sudoku:\"", "]"}], "}"}], ",", 
                    RowBox[{"{", "Sudoku`Private`caricaSudokuInput", "}"}]}], 
                    "}"}], "]"}], "]"}], ",", 
                    RowBox[{"Button", "[", 
                    RowBox[{"\"Carica Sudoku\"", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sudoku`Private`timer", "=", 
                    RowBox[{"-", "1"}]}], ";", 
                    RowBox[{"Sudoku`Private`aiuto", "=", "False"}], ";", 
                    RowBox[{"Sudoku`Private`mostraSoluzione", "=", "False"}], 
                    ";", 
                    RowBox[{"Sudoku`Private`difficoltaInCorso", "=", 
                    RowBox[{"Sudoku`Private`getDifficoltaCarica", "[", 
                    RowBox[{"Last", "[", 
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"ToExpression", "[", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"Sudoku`Private`caricaSudoku", ",", "4"}], "]"}], 
                    "]"}], "]"}], "]"}], "]"}]}], ";", 
                    
                    RowBox[{"Sudoku`Private`numSudoku", "=", 
                    "Sudoku`Private`caricaSudoku"}]}], ")"}], "&"}]}], 
                    "]"}]}], "}"}], "]"}], "]"}]}], "}"}], "]"}]}], "}"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", 
                    
                    RowBox[{"ContentSize", "\[Rule]", 
                    "Sudoku`Private`dimensioneManipulate"}], ",", 
                    RowBox[{"ControlPlacement", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Top", ",", "Top", ",", "Bottom"}], "}"}]}]}], 
                    "]"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Sudoku`SudokuGame\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Gioco del sudoku\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{8., {1., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{8., {1., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Gioco del sudoku", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, Sudoku`SudokuGame, {
      Sudoku`SudokuGame[] :> 
       DynamicModule[{
         Sudoku`Private`difficolta = "Facile", 
          Sudoku`Private`difficoltaInCorso = "Medio", 
          Sudoku`Private`popupDifficolta = PopupMenu[
            Dynamic[Sudoku`Private`difficolta], {
            "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> Small], 
          Sudoku`Private`difficoltaCarica = "Facile", 
          Sudoku`Private`popupDifficoltaCarica = PopupMenu[
            Dynamic[Sudoku`Private`difficoltaCarica], {
            "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> Small], 
          Sudoku`Private`numSudoku = RandomInteger[], 
          Sudoku`Private`caricaSudoku = 0, Sudoku`Private`caricaSudokuInput = 
          InputField[
            Dynamic[Sudoku`Private`caricaSudoku], FieldSize -> Small], 
          Sudoku`Private`sudoku, Sudoku`Private`fullBoard, 
          Sudoku`Private`puzzle, Sudoku`Private`cursor = {0, 0}, 
          Sudoku`Private`inputValue, Sudoku`Private`timer = 0, 
          Sudoku`Private`aiuto = False, Sudoku`Private`aiutoCheckbox = 
          Checkbox[
            Dynamic[Sudoku`Private`aiuto]], Sudoku`Private`mostraSoluzione = 
          False, Sudoku`Private`mostraSoluzioneCheckbox = Checkbox[
            Dynamic[Sudoku`Private`mostraSoluzione]], 
          Sudoku`Private`dimensioneManipulate = {
           Sudoku`Private`larghezza = 650, Sudoku`Private`altezza = 400}}, 
         Sudoku`Private`sudoku = 
          Sudoku`CreateSudoku[3, Sudoku`Private`difficoltaInCorso]; 
         Sudoku`Private`fullBoard = Part[Sudoku`Private`sudoku, "fullBoard"]; 
         Sudoku`Private`puzzle = Part[Sudoku`Private`sudoku, "sudokuPuzzle"]; 
         Manipulate[
           Grid[{{
              Column[{
                EventHandler[
                 Dynamic[
                  Sudoku`ShowSudoku[
                  Sudoku`Private`puzzle, 22, Sudoku`Private`cursor]], {
                 "MouseClicked" :> (Sudoku`Private`cursor = 
                   Sudoku`Private`loc2[
                    MousePosition["EventHandlerScaled"]]), 
                  "KeyDown" :> (
                   Sudoku`Private`inputValue = CurrentValue["EventKey"]; If[
                    And[Part[Sudoku`Private`cursor, 1] != 0, 
                    DigitQ[Sudoku`Private`inputValue], 
                    Between[
                    ToExpression[Sudoku`Private`inputValue], {1, 9}]], Part[
                    Part[Sudoku`Private`puzzle, 
                    Part[Sudoku`Private`cursor, 1]], 
                    Part[Sudoku`Private`cursor, 2]] = 
                    Sudoku`Private`inputValue])}]}], "\t", 
              If[Sudoku`Private`mostraSoluzione, 
               Dynamic[
                Sudoku`ShowSudoku[
                Sudoku`Private`fullBoard, 15, Sudoku`Private`cursor]], ""]}}], 
           Control[
            Row[{
              Spacer[170], 
              Sudoku`Private`titleMainStyle["Difficolt\[AGrave]:  "], 
              Sudoku`Private`titleElemStyle[
               Dynamic[Sudoku`Private`difficoltaInCorso]], 
              Spacer[20], 
              Sudoku`Private`titleMainStyle["Numero Sudoku:  "], 
              Sudoku`Private`titleElemStyle[
               Dynamic[Sudoku`Private`numSudoku]]}]], 
           Control[
            Row[{
              Spacer[{20, 50}], 
              Column[{
                Grid[
                 Transpose[{{
                    Sudoku`Private`mainStyle["Aiuto: "], 
                    Sudoku`Private`mainStyle["Mostra soluzione: "]}, {
                   Sudoku`Private`aiutoCheckbox, 
                    Sudoku`Private`mostraSoluzioneCheckbox}}]], 
                Button[
                "Ricomincia", (Sudoku`Private`timer = -1; 
                 Sudoku`Private`aiuto = False; 
                 Sudoku`Private`mostraSoluzione = False; Null)& ]}], 
              Spacer[{350, 0}], 
              Column[{
                Row[{
                  Sudoku`Private`mainStyle["Tempo:  "], 
                  Sudoku`Private`avviaTimer[]}]}]}]], 
           Control[
            Row[{
              Spacer[{100, 0}], 
              Column[{
                Sudoku`Private`elemStyle["Nuovo Sudoku:"], 
                Panel[
                 Column[{
                   Grid[
                    Transpose[{{
                    Sudoku`Private`mainStyle["Difficolt\[AGrave]: "]}, {
                    Sudoku`Private`popupDifficolta}}]], 
                   Button[
                   "Nuovo Sudoku", (Sudoku`Private`timer = -1; 
                    Sudoku`Private`aiuto = False; 
                    Sudoku`Private`mostraSoluzione = False; 
                    Sudoku`Private`difficoltaInCorso = 
                    Sudoku`Private`difficolta; 
                    Sudoku`Private`numSudoku = 
                    Sudoku`Private`generaNuovoSeed[]; 
                    Sudoku`Private`sudoku = 
                    Sudoku`CreateSudoku[3, Sudoku`Private`difficoltaInCorso]; 
                    Sudoku`Private`fullBoard = 
                    Part[Sudoku`Private`sudoku, "fullBoard"]; 
                    Sudoku`Private`puzzle = 
                    Part[Sudoku`Private`sudoku, "sudokuPuzzle"]; 
                    Null)& ]}]]}], 
              Spacer[{50, 0}], 
              Column[{
                Spacer[{0, 5}], 
                Sudoku`Private`elemStyle["Carica Sudoku:"], 
                Panel[
                 Column[{
                   Grid[
                    Transpose[{{
                    Sudoku`Private`mainStyle["Numero sudoku:"]}, {
                    Sudoku`Private`caricaSudokuInput}}]], 
                   Button[
                   "Carica Sudoku", (Sudoku`Private`timer = -1; 
                    Sudoku`Private`aiuto = False; 
                    Sudoku`Private`mostraSoluzione = False; 
                    Sudoku`Private`difficoltaInCorso = 
                    Sudoku`Private`getDifficoltaCarica[
                    Last[
                    IntegerDigits[
                    ToExpression[
                    Mod[Sudoku`Private`caricaSudoku, 4]]]]]; 
                    Sudoku`Private`numSudoku = 
                    Sudoku`Private`caricaSudoku)& ]}]]}]}]], SaveDefinitions -> 
           True, ContentSize -> Sudoku`Private`dimensioneManipulate, 
           ControlPlacement -> {Top, Top, Bottom}]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Sudoku`SudokuGame"|>, False]]], "Output",
 CellChangeTimes->{{3.8607489040490932`*^9, 3.8607489107812395`*^9}, 
   3.8607495906691008`*^9, {3.860749958607411*^9, 3.860749976144865*^9}, 
   3.8607500845043573`*^9, 3.8607503637521105`*^9, 3.8607520768512306`*^9, 
   3.8607526619883895`*^9, 3.8608187854979134`*^9, 3.860819038883255*^9, 
   3.8608190982651815`*^9, {3.860819158397416*^9, 3.860819178487342*^9}, 
   3.8608192581411285`*^9, 3.860819304174997*^9, {3.86081940408652*^9, 
   3.8608194285073357`*^9}, 3.861068754089235*^9, 3.8610690415475187`*^9, 
   3.8610691322219505`*^9, 3.8610691904404674`*^9, 3.861069228171137*^9, 
   3.8610698449077024`*^9, 3.861069888651621*^9, 3.861069940723174*^9, 
   3.8610703768581266`*^9, 3.8610704116528997`*^9, 3.861070618611951*^9, 
   3.8610715848580055`*^9, {3.8610718275473228`*^9, 3.8610718448788266`*^9}, 
   3.861072052496004*^9, 3.8610721274829473`*^9, 3.861072171979582*^9, 
   3.861072228061187*^9, 3.8610722605735345`*^9, 3.8610724043896956`*^9, {
   3.861072437841797*^9, 3.8610724610748596`*^9}, 3.861072497133757*^9, 
   3.86107254369843*^9, 3.8610726328755026`*^9, 3.861072786495719*^9, 
   3.8610730197000947`*^9, 3.8610732232252035`*^9, 3.861073293723981*^9, 
   3.861073410285663*^9, 3.8610735435009594`*^9, 3.861074114138278*^9, {
   3.8610741862894278`*^9, 3.861074205798152*^9}, 3.861075131248342*^9, 
   3.861075170909728*^9, 3.861075202735977*^9, {3.861075375698885*^9, 
   3.861075410794454*^9}, 3.86107544812363*^9, 3.861075741411654*^9, 
   3.861075772508885*^9, 3.8610762127361403`*^9, 3.861076248194137*^9, {
   3.86107628514662*^9, 3.861076326029964*^9}, 3.861076414029303*^9, 
   3.861076482328784*^9, 3.861076564863647*^9, 3.861076745935114*^9, {
   3.861077586919086*^9, 3.8610776359442244`*^9}},
 CellLabel->
  "Out[211]=",ExpressionUUID->"b8610fd3-1ac6-47ba-a0a4-d4f44e35ea8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SudokuGame", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8610692491032915`*^9, 3.861069254593988*^9}, {
  3.8610704491045384`*^9, 3.8610704509888315`*^9}, {3.86107053567478*^9, 
  3.8610705369364696`*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"129225ac-57d0-4eb3-ade8-5a1611fdb436"],

Cell[BoxData[
 DynamicModuleBox[{Sudoku`Private`difficolta$$ = "Medio", 
  Sudoku`Private`difficoltaInCorso$$ = "Medio", 
  Sudoku`Private`popupDifficolta$$ = PopupMenu[
   Dynamic[Sudoku`Private`difficolta$$], {
   "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> Small], 
  Sudoku`Private`difficoltaCarica$$ = "Facile", 
  Sudoku`Private`popupDifficoltaCarica$$ = PopupMenu[
   Dynamic[Sudoku`Private`difficoltaCarica$$], {
   "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> Small], 
  Sudoku`Private`numSudoku$$ = 793, Sudoku`Private`caricaSudoku$$ = 0, 
  Sudoku`Private`caricaSudokuInput$$ = InputField[
   Dynamic[Sudoku`Private`caricaSudoku$$], FieldSize -> Small], 
  Sudoku`Private`sudoku$$ = <|
  "fullBoard" -> 
   SparseArray[
    Automatic, {9, 9}, 0, {
     1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {4}, {5}, {
       6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
       2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
       7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {
       3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
       8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
       4}, {5}, {6}, {7}, {8}, {9}}}, {3, 6, 1, 2, 9, 8, 5, 4, 7, 2, 4, 5, 1, 
      7, 6, 9, 8, 3, 8, 7, 9, 4, 3, 5, 6, 1, 2, 1, 9, 4, 3, 5, 7, 8, 2, 6, 5, 
      2, 8, 6, 4, 1, 7, 3, 9, 7, 3, 6, 8, 2, 9, 1, 5, 4, 4, 1, 7, 9, 8, 3, 2, 
      6, 5, 6, 5, 3, 7, 1, 2, 4, 9, 8, 9, 8, 2, 5, 6, 4, 3, 7, 1}}], 
   "sudokuPuzzle" -> 
   SparseArray[
    Automatic, {9, 9}, Blank[], {
     1, {{0, 4, 9, 15, 17, 21, 27, 33, 37, 41}, {{8}, {2}, {4}, {5}, {6}, {
       3}, {5}, {1}, {2}, {2}, {1}, {8}, {4}, {3}, {6}, {3}, {2}, {6}, {3}, {
       9}, {8}, {7}, {6}, {1}, {5}, {8}, {9}, {7}, {2}, {6}, {8}, {1}, {4}, {
       2}, {9}, {1}, {6}, {2}, {7}, {6}, {1}}}, {4, 6, 2, 9, 6, 5, 7, 2, 4, 7,
       8, 1, 4, 9, 5, 4, 9, 1, 8, 9, 3, 1, 9, 7, 2, 5, 4, 2, 1, 3, 6, 4, 9, 5,
       8, 6, 2, 8, 3, 4, 9}}]|>, Sudoku`Private`fullBoard$$ = SparseArray[
  Automatic, {9, 9}, 0, {
   1, {{0, 9, 18, 27, 36, 45, 54, 63, 72, 81}, {{1}, {2}, {3}, {4}, {5}, {
     6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {
     2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {
     7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {
     3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
     8}, {9}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {1}, {2}, {3}, {
     4}, {5}, {6}, {7}, {8}, {9}}}, {3, 6, 1, 2, 9, 8, 5, 4, 7, 2, 4, 5, 1, 7,
     6, 9, 8, 3, 8, 7, 9, 4, 3, 5, 6, 1, 2, 1, 9, 4, 3, 5, 7, 8, 2, 6, 5, 2, 
    8, 6, 4, 1, 7, 3, 9, 7, 3, 6, 8, 2, 9, 1, 5, 4, 4, 1, 7, 9, 8, 3, 2, 6, 5,
     6, 5, 3, 7, 1, 2, 4, 9, 8, 9, 8, 2, 5, 6, 4, 3, 7, 1}}], 
  Sudoku`Private`puzzle$$ = SparseArray[
  Automatic, {9, 9}, Blank[], {
   1, {{0, 4, 9, 15, 17, 21, 27, 33, 37, 41}, {{8}, {2}, {4}, {5}, {6}, {3}, {
     5}, {1}, {2}, {2}, {1}, {8}, {4}, {3}, {6}, {3}, {2}, {6}, {3}, {9}, {
     8}, {7}, {6}, {1}, {5}, {8}, {9}, {7}, {2}, {6}, {8}, {1}, {4}, {2}, {
     9}, {1}, {6}, {2}, {7}, {6}, {1}}}, {4, 6, 2, 9, 6, 5, 7, 2, 4, 7, 8, 1, 
    4, 9, 5, 4, 9, 1, 8, 9, 3, 1, 9, 7, 2, 5, 4, 2, 1, 3, 6, 4, 9, 5, 8, 6, 2,
     8, 3, 4, 9}}], Sudoku`Private`cursor$$ = {0, 0}, 
  Sudoku`Private`inputValue$$, Sudoku`Private`timer$$ = 26, 
  Sudoku`Private`aiuto$$ = False, Sudoku`Private`aiutoCheckbox$$ = Checkbox[
   Dynamic[Sudoku`Private`aiuto$$]], Sudoku`Private`mostraSoluzione$$ = False,
   Sudoku`Private`mostraSoluzioneCheckbox$$ = Checkbox[
   Dynamic[Sudoku`Private`mostraSoluzione$$]], 
  Sudoku`Private`dimensioneManipulate$$ = {650, 400}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
     Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
     1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
       Hold[
        Row[{
          Spacer[170], 
          Style["Difficolt\[AGrave]:  ", FontSize -> 16], 
          Style[
           Dynamic[Sudoku`Private`difficoltaInCorso$$], FontSize -> 16, Bold], 
          Spacer[20], 
          Style["Numero Sudoku:  ", FontSize -> 16], 
          Style[
           Dynamic[Sudoku`Private`numSudoku$$], FontSize -> 16, Bold]}]], 
       Manipulate`Dump`ThisIsNotAControl}, {
       Hold[
        Row[{
          Spacer[{20, 50}], 
          Column[{
            Grid[{{
               Style["Aiuto: ", FontSize -> 14], 
               Checkbox[
                Dynamic[Sudoku`Private`aiuto$$]]}, {
               Style["Mostra soluzione: ", FontSize -> 14], 
               Checkbox[
                Dynamic[Sudoku`Private`mostraSoluzione$$]]}}], 
            Button[
            "Ricomincia", (Sudoku`Private`timer$$ = -1; 
             Sudoku`Private`aiuto$$ = False; 
             Sudoku`Private`mostraSoluzione$$ = False; Null)& ]}], 
          Spacer[{350, 0}], 
          Column[{
            Row[{
              Style["Tempo:  ", FontSize -> 14], 
              Dynamic[
               Refresh[
               Sudoku`Private`timer$$ = Sudoku`Private`timer$$ + 1; 
                Sudoku`Private`convert[Sudoku`Private`timer$$], 
                TrackedSymbols :> {}, UpdateInterval -> 1]]}]}]}]], 
       Manipulate`Dump`ThisIsNotAControl}, {
       Hold[
        Row[{
          Spacer[{100, 0}], 
          Column[{
            Style["Nuovo Sudoku:", FontSize -> 14, Bold], 
            Panel[
             Column[{
               Grid[{{
                  Style["Difficolt\[AGrave]: ", FontSize -> 14], 
                  PopupMenu[
                   Dynamic[Sudoku`Private`difficolta$$], {
                   "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> 
                   Small]}}], 
               Button[
               "Nuovo Sudoku", (Sudoku`Private`timer$$ = -1; 
                Sudoku`Private`aiuto$$ = False; 
                Sudoku`Private`mostraSoluzione$$ = False; 
                Sudoku`Private`difficoltaInCorso$$ = 
                 Sudoku`Private`difficolta$$; 
                Sudoku`Private`numSudoku$$ = Sudoku`Private`generaNuovoSeed[]; 
                Sudoku`Private`sudoku$$ = 
                 Sudoku`CreateSudoku[3, Sudoku`Private`difficoltaInCorso$$]; 
                Sudoku`Private`fullBoard$$ = 
                 Part[Sudoku`Private`sudoku$$, "fullBoard"]; 
                Sudoku`Private`puzzle$$ = 
                 Part[Sudoku`Private`sudoku$$, "sudokuPuzzle"]; Null)& ]}]]}], 
          Spacer[{50, 0}], 
          Column[{
            Spacer[{0, 5}], 
            Style["Carica Sudoku:", FontSize -> 14, Bold], 
            Panel[
             Column[{
               Grid[{{
                  Style["Numero sudoku:", FontSize -> 14], 
                  InputField[
                   Dynamic[Sudoku`Private`caricaSudoku$$], FieldSize -> 
                   Small]}}], 
               Button[
               "Carica Sudoku", (Sudoku`Private`timer$$ = -1; 
                Sudoku`Private`aiuto$$ = False; 
                Sudoku`Private`mostraSoluzione$$ = False; 
                Sudoku`Private`difficoltaInCorso$$ = 
                 Sudoku`Private`getDifficoltaCarica[
                   Last[
                    IntegerDigits[
                    ToExpression[
                    Mod[Sudoku`Private`caricaSudoku$$, 4]]]]]; 
                Sudoku`Private`numSudoku$$ = 
                 Sudoku`Private`caricaSudoku$$)& ]}]]}]}]], 
       Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
     286., {129.2072265625, 133.7927734375}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {}, "ControllerVariables" :> {}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Grid[{{
           Column[{
             EventHandler[
              Dynamic[
               Sudoku`ShowSudoku[
               Sudoku`Private`puzzle$$, 22, Sudoku`Private`cursor$$]], {
              "MouseClicked" :> (Sudoku`Private`cursor$$ = Sudoku`Private`loc2[
                  MousePosition["EventHandlerScaled"]]), 
               "KeyDown" :> (
                Sudoku`Private`inputValue$$ = CurrentValue["EventKey"]; If[
                  And[Part[Sudoku`Private`cursor$$, 1] != 0, 
                   DigitQ[Sudoku`Private`inputValue$$], 
                   Between[
                    ToExpression[Sudoku`Private`inputValue$$], {1, 9}]], 
                  Part[
                    Part[Sudoku`Private`puzzle$$, 
                    Part[Sudoku`Private`cursor$$, 1]], 
                    Part[Sudoku`Private`cursor$$, 2]] = 
                  Sudoku`Private`inputValue$$])}]}], "\t", 
           If[Sudoku`Private`mostraSoluzione$$, 
            Dynamic[
             Sudoku`ShowSudoku[
             Sudoku`Private`fullBoard$$, 15, Sudoku`Private`cursor$$]], 
            ""]}}], "Specifications" :> {
         Row[{
           Spacer[170], 
           Style["Difficolt\[AGrave]:  ", FontSize -> 16], 
           Style[
            Dynamic[Sudoku`Private`difficoltaInCorso$$], FontSize -> 16, 
            Bold], 
           Spacer[20], 
           Style["Numero Sudoku:  ", FontSize -> 16], 
           Style[
            Dynamic[Sudoku`Private`numSudoku$$], FontSize -> 16, Bold]}], 
         Row[{
           Spacer[{20, 50}], 
           Column[{
             Grid[{{
                Style["Aiuto: ", FontSize -> 14], 
                Checkbox[
                 Dynamic[Sudoku`Private`aiuto$$]]}, {
                Style["Mostra soluzione: ", FontSize -> 14], 
                Checkbox[
                 Dynamic[Sudoku`Private`mostraSoluzione$$]]}}], 
             Button[
             "Ricomincia", (Sudoku`Private`timer$$ = -1; 
              Sudoku`Private`aiuto$$ = False; 
              Sudoku`Private`mostraSoluzione$$ = False; Null)& ]}], 
           Spacer[{350, 0}], 
           Column[{
             Row[{
               Style["Tempo:  ", FontSize -> 14], 
               Dynamic[
                Refresh[
                Sudoku`Private`timer$$ = Sudoku`Private`timer$$ + 1; 
                 Sudoku`Private`convert[Sudoku`Private`timer$$], 
                 TrackedSymbols :> {}, UpdateInterval -> 1]]}]}]}], 
         Row[{
           Spacer[{100, 0}], 
           Column[{
             Style["Nuovo Sudoku:", FontSize -> 14, Bold], 
             Panel[
              Column[{
                Grid[{{
                   Style["Difficolt\[AGrave]: ", FontSize -> 14], 
                   PopupMenu[
                    Dynamic[Sudoku`Private`difficolta$$], {
                    "Tutorial", "Facile", "Medio", "Difficile"}, FieldSize -> 
                    Small]}}], 
                Button[
                "Nuovo Sudoku", (Sudoku`Private`timer$$ = -1; 
                 Sudoku`Private`aiuto$$ = False; 
                 Sudoku`Private`mostraSoluzione$$ = False; 
                 Sudoku`Private`difficoltaInCorso$$ = 
                  Sudoku`Private`difficolta$$; 
                 Sudoku`Private`numSudoku$$ = 
                  Sudoku`Private`generaNuovoSeed[]; 
                 Sudoku`Private`sudoku$$ = 
                  Sudoku`CreateSudoku[3, Sudoku`Private`difficoltaInCorso$$]; 
                 Sudoku`Private`fullBoard$$ = 
                  Part[Sudoku`Private`sudoku$$, "fullBoard"]; 
                 Sudoku`Private`puzzle$$ = 
                  Part[Sudoku`Private`sudoku$$, "sudokuPuzzle"]; 
                 Null)& ]}]]}], 
           Spacer[{50, 0}], 
           Column[{
             Spacer[{0, 5}], 
             Style["Carica Sudoku:", FontSize -> 14, Bold], 
             Panel[
              Column[{
                Grid[{{
                   Style["Numero sudoku:", FontSize -> 14], 
                   InputField[
                    Dynamic[Sudoku`Private`caricaSudoku$$], FieldSize -> 
                    Small]}}], 
                Button[
                "Carica Sudoku", (Sudoku`Private`timer$$ = -1; 
                 Sudoku`Private`aiuto$$ = False; 
                 Sudoku`Private`mostraSoluzione$$ = False; 
                 Sudoku`Private`difficoltaInCorso$$ = 
                  Sudoku`Private`getDifficoltaCarica[
                    Last[
                    IntegerDigits[
                    ToExpression[
                    Mod[Sudoku`Private`caricaSudoku$$, 4]]]]]; 
                 Sudoku`Private`numSudoku$$ = 
                  Sudoku`Private`caricaSudoku$$)& ]}]]}]}]}, 
       "Options" :> {
        ContentSize -> {650, 400}, ControlPlacement -> {Top, Top, Bottom}}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{547., {268., 272.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({Sudoku`ShowSudoku[
          Pattern[Sudoku`Private`board, 
           Blank[]], 
          Pattern[Sudoku`Private`dim, 
           Blank[]], 
          Optional[
           Pattern[Sudoku`Private`cursor, 
            Blank[]], {0, 0}]] := Module[{}, 
          Grid[
          Sudoku`Private`board, ItemSize -> Full, Frame -> 
           If[Sudoku`Private`cursor == {0, 0}, All, {
             All, All, Sudoku`Private`cursor -> {Blue}}], BaseStyle -> 
           Sudoku`Private`dim, Spacings -> {
             Offset[0.9], 
             Offset[0.6]}]], 
        TagSet[Sudoku`ShowSudoku, 
         MessageName[Sudoku`ShowSudoku, "usage"], "mostra"], 
        Sudoku`Private`loc2[{
           Pattern[Sudoku`Private`x, 
            Blank[]], 
           Pattern[Sudoku`Private`y, 
            Blank[]]}] := {
         Floor[9 (1 - Sudoku`Private`y)] + 1, Floor[9 Sudoku`Private`x] + 1}, 
        Sudoku`Private`convert[
          Pattern[Sudoku`Private`x, 
           Blank[]]] := Sudoku`Private`elemStyle[
          UnitConvert[
           Quantity[Sudoku`Private`x, "Seconds"], 
           MixedUnit[{"Hours", "Minutes", "Seconds"}]]], 
        Sudoku`Private`elemStyle[
          Pattern[Sudoku`Private`s, 
           Blank[]]] := Style[Sudoku`Private`s, FontSize -> 14, Bold], 
        Sudoku`Private`generaNuovoSeed[] := RandomInteger[{1, 1000}], 
        Sudoku`CreateSudoku[
          Pattern[Sudoku`Private`dim, 
           Blank[]], 
          Pattern[Sudoku`Private`diffic, 
           Blank[]]] := 
        Module[{Sudoku`Private`fullBoard, Sudoku`Private`sudokuPuzzle, 
           Sudoku`Private`nEl}, 
          Sudoku`Private`nEl = 
           Switch[
            Sudoku`Private`diffic, "Tutorial", 0.9, "Facile", 0.7, "Medio", 
             0.5, "Difficile", 0.2]; {
            Sudoku`Private`fullBoard, Sudoku`Private`sudokuPuzzle} = 
           ResourceFunction["GenerateSudokuPuzzle"][
            Sudoku`Private`dim, Sudoku`Private`nEl]; 
          Return[<|"fullBoard" -> Sudoku`Private`fullBoard, "sudokuPuzzle" -> 
             Sudoku`Private`sudokuPuzzle|>]], 
        TagSet[Sudoku`CreateSudoku, 
         MessageName[Sudoku`CreateSudoku, "usage"], " "], 
        Sudoku`Private`getDifficoltaCarica[
          Pattern[Sudoku`Private`seed, 
           Blank[]]] := 
        Switch[Sudoku`Private`seed, 0, "Tutorial", 1, "Facile", 2, "Medio", 
          Blank[], "Difficile"]}; Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{
  3.861075291203969*^9, 3.8610753399602423`*^9, {3.861075375947287*^9, 
   3.8610754507398777`*^9}, 3.861075482482381*^9, 3.861075601439383*^9, {
   3.861075695168437*^9, 3.861075747702373*^9}, {3.861075778735559*^9, 
   3.861075824761187*^9}, 3.861075866260729*^9, 3.86107590005893*^9, {
   3.8610760719753733`*^9, 3.861076104938526*^9}, 3.861076161406621*^9, 
   3.861076212940333*^9, {3.861076248431963*^9, 3.861076257761396*^9}, {
   3.8610762904694557`*^9, 3.861076347769093*^9}, 3.861076422574871*^9, {
   3.861076485330431*^9, 3.861076513096448*^9}, 3.861076568130253*^9, {
   3.8610767221105747`*^9, 3.861076746138978*^9}, 3.861076793977759*^9, {
   3.8610775871823387`*^9, 3.8610776668778353`*^9}},
 CellLabel->
  "Out[212]=",ExpressionUUID->"deedaf2f-c181-4d44-800a-c44a60c2258b"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{Automatic, -5}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[
               OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>0.8 Inherited,
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aa3ba23a-012a-44de-86b9-47e132f7fc63"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 278, 7, 25, "Input",ExpressionUUID->"9a39f568-919f-4adb-8af6-e8e71e19f064"],
Cell[839, 29, 258, 5, 24, "Input",ExpressionUUID->"f74477cc-5091-4301-8864-0f395ffe0271"],
Cell[CellGroupData[{
Cell[1122, 38, 257, 5, 24, "Input",ExpressionUUID->"423ffae2-6041-4243-a41d-4be3275970a1"],
Cell[1382, 45, 33609, 722, 80, "Output",ExpressionUUID->"b8610fd3-1ac6-47ba-a0a4-d4f44e35ea8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35028, 772, 312, 6, 24, "Input",ExpressionUUID->"129225ac-57d0-4eb3-ade8-5a1611fdb436"],
Cell[35343, 780, 16668, 350, 556, "Output",ExpressionUUID->"deedaf2f-c181-4d44-800a-c44a60c2258b"]
}, Open  ]]
}
]
*)

